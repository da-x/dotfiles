[user]
    useConfigOnly = true

[core]
    editor = vim
    abbrev = 12

[merge]
    conflictstyle = diff3

[diff]
    renames = true
    submodule = log

[push]
    default = simple

[pull]
    ff = only

[branch]
    autosetuprebase = always

[log]
    decorate = true

[gc]
    auto = 0

[grep]
    lineNumber = true

[pager]
    log = fancydiff stdin --pager=less
    show = fancydiff stdin --pager=less
    diff = fancydiff stdin --pager=less

[color]
    ui = true
    diff = off

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "grep"]
    linenumber = white bold
    match = green bold
    filename = cyan
    separator = yellow

[status]
    submoduleSummary = true

[alias]
    A    = add
    C    = commit
    Cm   = commit -m
    Ca   = commit -a
    Cam  = commit -a -m
    P    = push
    RH   = !sh -c 'git reset --hard $@' -
    RHH  = !sh -c 'git reset --hard HEAD' -
    S    = status
    b    = branch -v
    bd   = branch -D
    bm   = branch -M
    bn   = rev-parse --abbrev-ref HEAD
    br   = branch -r
    bu   = branch -u
    buo  = !sh -c 'git bu origin/$(git bn)'
    buom = !sh -c 'git bu origin/master'
    co   = checkout
    cp1  = chop1
    cp2  = chop2
    crpk = cherry-pick
    ct   = "!git tracking-branch"
    ctags = !sh -c 'git ls-files | ctags --c-kinds=+p -L -' -
    d    = "!git diff"
    elc  = "!vim `git rev-parse --git-dir`/config"
    f    = fetch
    ftl  = !sh -c 'git fixup-to-last $@' -
    ful  = !sh -c '~/.files/git-fixup/git-fixup $@' -
    g    = "!git grep"
    l    = "!git log"
    l1   = "!git log -1"
    lc   = !sh -c 'git log `git ct`..HEAD $@' --
    lc1  = !sh -c 'git log `git ct`..HEAD --oneline $@' --
    lcr  = !sh -c 'git log --reverse `git ct`..HEAD $@' --
    lig  = "!git ls-ignored"
    nC   = "!git anticom"
    oC   = !sh -c 'git commit-orig $@' -
    rem  = remote
    sh   = "!git show"
    sh1  = "!git show HEAD~1 $@"
    sh2  = "!git show HEAD~2 $@"
    sh3  = "!git show HEAD~3 $@"
    sh4  = "!git show HEAD~4 $@"
    sh5  = "!git show HEAD~5 $@"
    sh6  = "!git show HEAD~6 $@"
    sh7  = "!git show HEAD~7 $@"
    sh8  = "!git show HEAD~8 $@"
    st   = status
    ua   = reset HEAD

    # What refs contains the sha
    whatrelease = name-rev --name-only
    contains = branch --contains

    # What is the tracking branch of the current branch
    tracking-branch = rev-parse --abbrev-ref --symbolic-full-name @{u}

    # from https://github.com/cypher/dotfiles/blob/master/gitconfig
    ls-ignored = ls-files --exclude-standard --ignored --others
    list-untracked  = !sh -c 'git status --porcelain | grep '^??' | cut -c4-' -

    add-prefix = !sh -c 'T=`git ct` && git tag-commits ${T} --add-prefix $@' -
    add-suffix = !sh -c 'T=`git ct` && git tag-commits ${T} --add-suffix $@' -
    add-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"
    root-conf = !sh -c 'cat ~/.files/gitconfig'
    amend = commit --amend
    amendA = !sh -c 'git amend -a' -
    amendAD = !sh -c 'git amend --date=\"$(date -R)\" -a' -
    amendD = !sh -c 'git amend --date=\"$(date -R)\"' -
    amendDA = !sh -c 'git amend --date=\"$(date -R)\" -a' -
    amendN = !sh -c 'git amend --no-edit' -
    amendNA = !sh -c 'git amend --no-edit -a' -
    amendNAD = !sh -c 'git amend --no-edit --date=\"$(date -R)\" -a' -
    amendND = !sh -c 'git amend --no-edit --date=\"$(date -R)\"' -
    amendNDA = !sh -c 'git amend --no-edit --date=\"$(date -R)\" -a' -
    anticom = !sh -c 'git reset --soft HEAD^'
    chop1 = reset --hard HEAD~1
    chop2 = reset --hard HEAD~2
    commit-orig = !sh -c 'git commit -C ORIG_HEAD $@' -
    cont = !git-continue
    diff-fancy = "!git -c color.diff=off -c pager.diff='fancydiff stdin --pager=less' diff $@"
    edit-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; eb `f`"
    empty-branches = !sh -c 'T=`git ct` && git branch --merged ${T} $@' -
    first-not-mine = !sh -c 'git --no-pager log $@ --perl-regexp --author=\"^((?!$(git config user.name)).*)$\" -n 1 --pretty="%H"' -
    graph = "!git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
    last = !sh -c 'T=`git ct` && git log ${T}@{1}..${T} $@' -
    log-fancy = "!git -c color.diff=off -c pager.log='fancydiff stdin --pager=less' log $@"
    next = !sh -c 'T=`git ct` && git log ${T}.. $@' -
    reb = !sh -c 'T=`git ct` && git rebase --autosquash $1 ${T} $@' -
    rebI = !sh -c 'T=`git ct` && git rebase --autosquash -i $1 ${T} $@' -
    show-fancy = "!git -c color.diff=off -c pager.show='fancydiff stdin --pager=less' show $@"
    todo = "!vim `git rev-parse --git-dir`/todo.md"

    # typos
    lgo = "!git log"
    gerp = "!git grep"
    branc = branch
    rebae = rebase
    statuus = status
    tatus = status
    sattus = status
    remtoe = remote
    dif = "!git diff"
